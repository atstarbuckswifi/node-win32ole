{
  "name": "node-win32ole",
  "tagline": "Win32ole bindings for node.js .",
  "body": "# NAME\r\n\r\nnode-win32ole - win32ole bindings for [node.js](https://github.com/joyent/node) powered by v8 engine .\r\n\r\nwin32ole makes accessibility from node.js to Excel, Word, Access, Outlook, InternetExplorer, WSH ( ActiveXObject / COM ) and so on. It does not need a type library, although it will function better if OLE objects provide type information.\r\n\r\n\r\n# USAGE\r\n\r\nInstall with (nothing yet, this is still a private fork.  Soon?).\r\n\r\nIt works as... (version 0.1.x)\r\n\r\n``` js\r\ntry{\r\n  var win32ole = require('win32ole');\r\n  // var xl = new ActiveXObject('Excel.Application'); // You may write it as:\r\n  var xl = win32ole.client.Dispatch(['Excel.Application'](https://msdn.microsoft.com/en-us/library/microsoft.office.interop.excel._application_members.aspx));\r\n  xl.Visible = true;\r\n  var book = xl.Workbooks.Add();\r\n  var sheet = book.Worksheets[1];\r\n  try{\r\n    sheet.Name = 'sheetnameA utf8';\r\n    sheet.get_Cells(1, 2).Value = 'test utf8';\r\n    var rg = sheet.get_Range(sheet.get_Cells(2, 2), sheet.get_Cells(4, 4));\r\n    rg.RowHeight = 5.18;\r\n    rg.ColumnWidth = 0.58;\r\n    rg.Interior.ColorIndex = 6; // Yellow\r\n    var result = book.SaveAs('testfileutf8.xls');\r\n    console.log(result);\r\n  }catch(e){\r\n    console.log('(exception cached)\\n' + e);\r\n  }\r\n  xl.ScreenUpdating = true;\r\n  xl.Workbooks.Close();\r\n  xl.Quit();\r\n}catch(e){\r\n  console.log('*** exception cached ***\\n' + e);\r\n}\r\n```\r\n\r\nThere are 3 ways to make force Garbage Collection for node.js / v8 .\r\n\r\n- 1. use huge memory to run GC automatically ( causes abnormal termination )\r\n- 2. win32ole.force_gc_extension(1);\r\n- 3. win32ole.force_gc_internal(1);\r\n\r\nsee also [examples/ole_args_test_client.js](https://github.com/idobatter/node-win32ole/blob/master/examples/ole_args_test_client.js)\r\n\r\n# Intro\r\n\r\nMicrosoft introduced [COM](https://en.wikipedia.org/wiki/Component_Object_Model) in 1993 and pushed it as the primary means of having applications communicate with each other.  More recently Microsoft has been transitioning to use of .NET components which cannot be seen or used by COM applications, but they do still provide COM interfaces for most of their products (and make it easy for developers to make C# COM-visible).\r\n\r\nThis library supports COM objects that implement the [IDispatch](https://en.wikipedia.org/wiki/IDispatch) interface.  \r\n\r\n# Tutorial and Examples\r\n\r\n- [test/init_win32ole.test.js](https://github.com/idobatter/node-win32ole/blob/master/test/init_win32ole.test.js)\r\n- [test/unicode.test.js](https://github.com/idobatter/node-win32ole/blob/master/test/unicode.test.js)\r\n- [examples/maze_creator.js](https://github.com/idobatter/node-win32ole/blob/master/examples/maze_creator.js)\r\n- [examples/maze_solver.js](https://github.com/idobatter/node-win32ole/blob/master/examples/maze_solver.js)\r\n- [examples/word_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/word_sample.js)\r\n- [examples/access_mdb_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/access_mdb_sample.js)\r\n- [examples/outlook_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/outlook_sample.js)\r\n- [examples/ie_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/ie_sample.js)\r\n- [examples/typelibrary_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/typelibrary_sample.js)\r\n- [examples/uncfinder_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/uncfinder_sample.js)\r\n- [examples/activex_filesystemobject_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/activex_filesystemobject_sample.js)\r\n- [examples/wmi_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/wmi_sample.js)\r\n- [examples/wsh_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/wsh_sample.js)\r\n- [examples/ole_args_test_client.js](https://github.com/idobatter/node-win32ole/blob/master/examples/ole_args_test_client.js)\r\n- [examples/ole_args_test_client_metamorphoses.js](https://github.com/idobatter/node-win32ole/blob/master/examples/ole_args_test_client_metamorphoses.js)\r\n\r\n\r\n# Other built in functions\r\n\r\n* win32ole.version(void) // returns version string\r\n* win32ole.printACP(utf8string) // Utf8 to .ACP\r\n* win32ole.print(utf8string) // ASCII\r\n* win32ole.gettimeofday(struct timeval &tv, null) // now arg2 is not used\r\n* win32ole.sleep(long milliseconds, bool withmessage=false, bool with\\n=false)\r\n* win32ole.force_gc_extension(long flag) // now flag is dummy\r\n* win32ole.force_gc_internal(long flag, string) // now flag is dummy\r\n\r\n\r\n# FEATURES\r\n\r\n* fix BUG: date\r\n* BUG: A few samples in win32ole@0.1.0 needs '._' ideom.\r\n* When you use unary operator '!' at the place that needs boolean CONDITION (for example 'while(!obj.status){...}') , you must write 'while(!obj.status._){...}' to complete v8::Object::ToBoolean() conversion. (NamedPropertyHandler will not be called because v8::Object::ToBoolean() is called directly for unary operator '!' instead of v8::Object::valueOf() in ParseUnaryExpression() v8/src/parser.cc .) Do you know how to fake it?\r\n* V8Variant::OLEGetAttr returns a copy of object, so it uses much memory. I want to fix it.\r\n* Now '._' ideom is obsoleted.\r\n* Remove 'node-proxy' from dependencies list.\r\n* Change default branch to dev0.1.0 .\r\n* BUG: Some samples in between win32ole@0.0.25 and win32ole@0.0.28 ( examples/maze_creator.js examples/maze_solver.js ) uses huge memory and many disposers will run by v8 GC when maze size is 20*30. I think that each encapsulated V8Variant (by node-proxy) may be big object. So I will try to use v8 accessor handlers ( SetCallAsFunctionHandler / SetNamedPropertyHandler / SetIndexedPropertyHandler ) instead of ( '__noSuchMethod__' / '__noSuchGetter__' / '__noSuchSetter__' ) by node-proxy.\r\n* So much implements. (can not handle some COM VARIANT types, array etc.)\r\n* Bug fix. (throws exception when failed to Invoke(), and many test message.)\r\n* Implement accessors getter, setter and caller. (version 0.1.x) (Some V8Variants were advanced to 0.1.x .)\r\n\r\n\r\n# API\r\n\r\nSee the [API documentation](https://github.com/idobatter/node-win32ole/wiki) in the wiki.\r\n\r\n\r\n# BUILDING\r\n\r\nThis project uses VC++ 2008 Express (or later) and Python 2.6 (or later) .\r\n(When using Python 2.5, it needs [multiprocessing 2.5 back port](http://pypi.python.org/pypi/multiprocessing/) .) It needs neither ATL nor MFC.\r\n\r\nBulding also requires node-gyp to be installed. You can do this with npm:\r\n\r\n    npm install -g node-gyp\r\n\r\nTo obtain and build the bindings:\r\n\r\n    git clone git://github.com/idobatter/node-win32ole.git\r\n    cd node-win32ole\r\n    node-gyp configure\r\n    node-gyp build\r\n\r\nYou can also use [`npm`](https://github.com/isaacs/npm) to download and install them:\r\n\r\n    npm install win32ole\r\n\r\n\r\n# TESTS\r\n\r\n[mocha](https://github.com/visionmedia/mocha) is required to run unit tests.\r\n\r\n    npm install -g mocha\r\n    nmake /a test\r\n\r\n\r\n# CONTRIBUTORS\r\n\r\n* [idobatter](https://github.com/idobatter)\r\n\r\n\r\n# ACKNOWLEDGEMENTS\r\n\r\nInspired [Win32OLE](http://www.ruby-doc.org/stdlib/libdoc/win32ole/rdoc/)\r\n\r\n\r\n# LICENSE\r\n\r\n`node-win32ole` is [BSD licensed](https://github.com/idobatter/node-win32ole/raw/master/LICENSE).\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}